This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
package.json
public/index.html
public/manifest.json
src/App.css
src/App.js
src/components/common/ChartContainer.jsx
src/components/common/ErrorBoundary.jsx
src/components/common/LoadingSpinner.jsx
src/components/layout/Navbar.jsx
src/components/layout/Sidebar.jsx
src/index.js
src/pages/CompetitorAnalysis.jsx
src/pages/Dashboard.jsx
src/pages/ListingGeneration.jsx
src/pages/NicheDiscovery.jsx
src/pages/Settings.jsx
src/pages/StressTesting.jsx
src/pages/TrendValidation.jsx
src/reportWebVitals.js
src/services/api.js
src/utils/chartUtils.js
tailwind.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="package.json">
{
  "name": "kdp-strategist-frontend",
  "version": "1.0.0",
  "description": "React frontend for KDP Strategist AI Agent",
  "private": true,
  "dependencies": {
    "@headlessui/react": "^1.7.17",
    "@heroicons/react": "^2.0.18",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "chart.js": "^4.4.0",
    "chartjs-adapter-date-fns": "^3.0.0",
    "date-fns": "^2.30.0",
    "react": "^18.2.0",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.16.0",
    "react-scripts": "5.0.1",
    "react-toastify": "^9.1.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint src --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint src --ext .js,.jsx,.ts,.tsx --fix",
    "format": "prettier --write src/**/*.{js,jsx,ts,tsx,css,md}"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.58",
    "@types/react": "^18.2.25",
    "@types/react-dom": "^18.2.11",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "postcss": "^8.4.31",
    "prettier": "^3.0.3",
    "tailwindcss": "^3.3.5",
    "typescript": "^4.9.5"
  },
  "proxy": "http://localhost:8001"
}
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="KDP Strategist - AI-powered tool for Amazon KDP market analysis, niche discovery, and listing optimization"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <!-- Meta tags for SEO -->
    <meta name="keywords" content="KDP, Amazon KDP, book publishing, niche research, market analysis, AI tools" />
    <meta name="author" content="KDP Strategist" />
    <!-- Open Graph meta tags -->
    <meta property="og:title" content="KDP Strategist - AI-Powered Publishing Intelligence" />
    <meta property="og:description" content="Discover profitable niches, analyze competitors, and optimize your KDP listings with AI-powered insights." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="%PUBLIC_URL%" />
    <meta property="og:image" content="%PUBLIC_URL%/og-image.png" />
    <!-- Twitter Card meta tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="KDP Strategist - AI-Powered Publishing Intelligence" />
    <meta name="twitter:description" content="Discover profitable niches, analyze competitors, and optimize your KDP listings with AI-powered insights." />
    <meta name="twitter:image" content="%PUBLIC_URL%/twitter-image.png" />
    <title>KDP Strategist - AI-Powered Publishing Intelligence</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!-- Loading fallback -->
    <div id="loading-fallback" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: #f9fafb; z-index: 9999; display: flex; align-items: center; justify-content: center; flex-direction: column;">
      <div style="width: 40px; height: 40px; border: 4px solid #e5e7eb; border-top: 4px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite;"></div>
      <p style="margin-top: 16px; color: #6b7280; font-family: system-ui, -apple-system, sans-serif;">Loading KDP Strategist...</p>
    </div>
    <style>
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      /* Hide loading fallback when React loads */
      #root:not(:empty) ~ #loading-fallback {
        display: none !important;
      }
    </style>
    <!-- Error boundary fallback -->
    <script>
      window.addEventListener('error', function(e) {
        console.error('Global error:', e.error);
        // You could send this to an error reporting service
      });
      window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled promise rejection:', e.reason);
        // You could send this to an error reporting service
      });
    </script>
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "KDP Strategist",
  "name": "KDP Strategist - AI-Powered Publishing Strategy Tool",
  "description": "Comprehensive tool for Amazon KDP publishing strategy, niche discovery, and competitor analysis",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff",
  "orientation": "portrait-primary",
  "categories": ["business", "productivity", "education"]
}
</file>

<file path="src/App.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
/* Import Inter font */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap');
/* Base styles */
@layer base {
  html {
    font-family: 'Inter', system-ui, sans-serif;
  }
  body {
    @apply bg-gray-50 text-gray-900 antialiased;
  }
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    @apply w-2;
  }
  ::-webkit-scrollbar-track {
    @apply bg-gray-100;
  }
  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 rounded-full;
  }
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400;
  }
}
/* Component styles */
@layer components {
  /* Button variants */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }
  .btn-secondary {
    @apply btn bg-white text-gray-700 border-gray-300 hover:bg-gray-50 focus:ring-primary-500;
  }
  .btn-success {
    @apply btn bg-success-600 text-white hover:bg-success-700 focus:ring-success-500;
  }
  .btn-warning {
    @apply btn bg-warning-600 text-white hover:bg-warning-700 focus:ring-warning-500;
  }
  .btn-danger {
    @apply btn bg-danger-600 text-white hover:bg-danger-700 focus:ring-danger-500;
  }
  .btn-sm {
    @apply px-3 py-1.5 text-xs;
  }
  .btn-lg {
    @apply px-6 py-3 text-base;
  }
  /* Card styles */
  .card {
    @apply bg-white rounded-lg shadow-soft border border-gray-200;
  }
  .card-header {
    @apply px-6 py-4 border-b border-gray-200;
  }
  .card-body {
    @apply px-6 py-4;
  }
  .card-footer {
    @apply px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-lg;
  }
  /* Form styles */
  .form-input {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm;
  }
  .form-select {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm;
  }
  .form-textarea {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm;
  }
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  .form-error {
    @apply mt-1 text-sm text-danger-600;
  }
  .form-help {
    @apply mt-1 text-sm text-gray-500;
  }
  /* Badge styles */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  .badge-primary {
    @apply badge bg-primary-100 text-primary-800;
  }
  .badge-secondary {
    @apply badge bg-gray-100 text-gray-800;
  }
  .badge-success {
    @apply badge bg-success-100 text-success-800;
  }
  .badge-warning {
    @apply badge bg-warning-100 text-warning-800;
  }
  .badge-danger {
    @apply badge bg-danger-100 text-danger-800;
  }
  /* Alert styles */
  .alert {
    @apply p-4 rounded-md;
  }
  .alert-info {
    @apply alert bg-primary-50 border border-primary-200 text-primary-800;
  }
  .alert-success {
    @apply alert bg-success-50 border border-success-200 text-success-800;
  }
  .alert-warning {
    @apply alert bg-warning-50 border border-warning-200 text-warning-800;
  }
  .alert-danger {
    @apply alert bg-danger-50 border border-danger-200 text-danger-800;
  }
  /* Loading spinner */
  .spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-primary-600;
  }
  /* Chart container */
  .chart-container {
    @apply relative w-full h-64 md:h-80 lg:h-96;
  }
  /* Data table */
  .data-table {
    @apply min-w-full divide-y divide-gray-200;
  }
  .data-table thead {
    @apply bg-gray-50;
  }
  .data-table th {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }
  .data-table td {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
  }
  .data-table tbody tr:nth-child(even) {
    @apply bg-gray-50;
  }
  .data-table tbody tr:hover {
    @apply bg-gray-100;
  }
  /* Sidebar styles */
  .sidebar {
    @apply fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out;
  }
  .sidebar-open {
    @apply translate-x-0;
  }
  .sidebar-closed {
    @apply -translate-x-full;
  }
  /* Navigation styles */
  .nav-item {
    @apply flex items-center px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200;
  }
  .nav-item-active {
    @apply nav-item bg-primary-100 text-primary-700;
  }
  .nav-item-inactive {
    @apply nav-item text-gray-600 hover:bg-gray-100 hover:text-gray-900;
  }
  /* Dropdown styles */
  .dropdown {
    @apply absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none;
  }
  .dropdown-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200;
  }
  /* Modal styles */
  .modal-overlay {
    @apply fixed inset-0 z-50 overflow-y-auto;
  }
  .modal-backdrop {
    @apply fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity;
  }
  .modal-container {
    @apply flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0;
  }
  .modal-content {
    @apply relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg;
  }
  /* Tooltip styles */
  .tooltip {
    @apply absolute z-10 px-2 py-1 text-xs font-medium text-white bg-gray-900 rounded shadow-lg;
  }
  /* Progress bar */
  .progress-bar {
    @apply w-full bg-gray-200 rounded-full h-2;
  }
  .progress-fill {
    @apply h-2 bg-primary-600 rounded-full transition-all duration-300;
  }
}
/* Utility styles */
@layer utilities {
  /* Text utilities */
  .text-gradient {
    @apply bg-gradient-to-r from-primary-600 to-primary-800 bg-clip-text text-transparent;
  }
  /* Animation utilities - defined in tailwind.config.js */
  /* Layout utilities */
  .container-fluid {
    @apply w-full max-w-none px-4 sm:px-6 lg:px-8;
  }
  .container-narrow {
    @apply max-w-4xl mx-auto px-4 sm:px-6 lg:px-8;
  }
  /* Responsive grid */
  .grid-responsive {
    @apply grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4;
  }
  /* Focus styles */
  .focus-ring {
    @apply focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }
  /* Hover effects */
  .hover-lift {
    @apply transition-transform duration-200 hover:-translate-y-1;
  }
  .hover-scale {
    @apply transition-transform duration-200 hover:scale-105;
  }
}
/* Custom animations - moved to tailwind.config.js to avoid duplication */
/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  .print-break {
    page-break-before: always;
  }
  .print-avoid-break {
    page-break-inside: avoid;
  }
}
/* Dark mode styles (if needed in future) */
@media (prefers-color-scheme: dark) {
  .dark-mode {
    @apply bg-gray-900 text-gray-100;
  }
}
</file>

<file path="src/App.js">
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
// Components
import Navbar from './components/layout/Navbar';
import Sidebar from './components/layout/Sidebar';
import LoadingSpinner from './components/common/LoadingSpinner';
import ErrorBoundary from './components/common/ErrorBoundary';
// Pages
import Dashboard from './pages/Dashboard';
import NicheDiscovery from './pages/NicheDiscovery';
import CompetitorAnalysis from './pages/CompetitorAnalysis';
import ListingGeneration from './pages/ListingGeneration';
import TrendValidation from './pages/TrendValidation';
import StressTesting from './pages/StressTesting';
import Settings from './pages/Settings';
// Services
import { apiService } from './services/api';
// Styles
import './App.css';
function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [isConnected, setIsConnected] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  useEffect(() => {
    // Initialize the application
    initializeApp();
  }, []);
  const initializeApp = async () => {
    try {
      setIsLoading(true);
      // Check API health
      const healthCheck = await apiService.checkHealth();
      setIsConnected(healthCheck.status === 'healthy');
      // Initialize user session (if needed)
      // For now, we'll use a default user
      setCurrentUser({
        id: 'default',
        name: 'KDP Strategist User',
        preferences: {
          theme: 'light',
          defaultExportFormat: 'csv'
        }
      });
    } catch (error) {
      console.error('Failed to initialize app:', error);
      setIsConnected(false);
    } finally {
      setIsLoading(false);
    }
  };
  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner size="large" message="Initializing KDP Strategist..." />
      </div>
    );
  }
  if (!isConnected) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="mb-4">
            <svg className="mx-auto h-12 w-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="mt-2 text-sm font-medium text-gray-900">Connection Failed</h3>
          <p className="mt-1 text-sm text-gray-500">
            Unable to connect to the KDP Strategist API. Please ensure the backend server is running.
          </p>
          <div className="mt-6">
            <button
              onClick={initializeApp}
              className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Retry Connection
            </button>
          </div>
        </div>
      </div>
    );
  }
  return (
    <ErrorBoundary>
      <Router>
        <div className="min-h-screen bg-gray-50">
          {/* Navigation */}
          <div className="flex">
          {/* Sidebar */}
          <Sidebar 
            isOpen={sidebarOpen}
            onClose={() => setSidebarOpen(false)}
          />
          {/* Main Content Area */}
          <div className={`flex-1 transition-all duration-300 ${sidebarOpen ? 'ml-64' : 'ml-0'}`}>
            <Navbar
              onToggleSidebar={toggleSidebar}
              currentUser={currentUser}
              isConnected={isConnected}
              sidebarOpen={sidebarOpen}
            />
            <main className="pt-16">
              <div className="py-6">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                  <Routes>
                    <Route path="/" element={<Navigate to="/dashboard" replace />} />
                    <Route path="/dashboard" element={<Dashboard />} />
                    <Route path="/niche-discovery" element={<NicheDiscovery />} />
                    <Route path="/competitor-analysis" element={<CompetitorAnalysis />} />
                    <Route path="/listing-generation" element={<ListingGeneration />} />
                    <Route path="/trend-validation" element={<TrendValidation />} />
                    <Route path="/stress-testing" element={<StressTesting />} />
                    <Route path="/settings" element={<Settings />} />
                    <Route path="*" element={<Navigate to="/dashboard" replace />} />
                  </Routes>
                </div>
              </div>
            </main>
          </div>
          </div>
          {/* Toast Notifications */}
          <ToastContainer
            position="top-right"
            autoClose={5000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
            theme="light"
          />
        </div>
      </Router>
    </ErrorBoundary>
  );
}
export default App;
</file>

<file path="src/components/common/ChartContainer.jsx">
import React from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';
import { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';
import { transformChartData, validateChartData } from '../../utils/chartUtils';
// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);
const ChartContainer = ({ chartData, className = '' }) => {
  // Validate the incoming chart data
  if (!validateChartData(chartData)) {
    return (
      <div className={`flex items-center justify-center h-64 bg-gray-50 rounded-lg ${className}`}>
        <p className="text-gray-500">No chart data available</p>
      </div>
    );
  }
  const { type, options = {} } = chartData;
  // Transform API data to Chart.js format
  const transformedData = transformChartData(chartData);
  // Ensure we have valid datasets after transformation
  if (!transformedData.datasets || transformedData.datasets.length === 0) {
    return (
      <div className={`flex items-center justify-center h-64 bg-gray-50 rounded-lg ${className}`}>
        <p className="text-gray-500">Unable to process chart data</p>
      </div>
    );
  }
  // Default options for all charts
  const defaultOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top',
        labels: {
          usePointStyle: true,
          padding: 20,
          font: {
            size: 12
          }
        }
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: 'white',
        bodyColor: 'white',
        borderColor: 'rgba(255, 255, 255, 0.1)',
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: true,
        intersect: false,
        mode: 'index'
      }
    },
    scales: type === 'pie' || type === 'doughnut' ? {} : {
      x: {
        grid: {
          display: false
        },
        ticks: {
          font: {
            size: 11
          }
        }
      },
      y: {
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        ticks: {
          font: {
            size: 11
          }
        }
      }
    },
    ...options
  };
  // Use the transformed data (already has proper colors and structure)
  const enhancedData = transformedData;
  const renderChart = () => {
    const chartProps = {
      data: enhancedData,
      options: defaultOptions
    };
    switch (type.toLowerCase()) {
      case 'bar':
        return <Bar {...chartProps} />;
      case 'line':
        return <Line {...chartProps} />;
      case 'pie':
        return <Pie {...chartProps} />;
      case 'doughnut':
        return <Doughnut {...chartProps} />;
      default:
        return (
          <div className="flex items-center justify-center h-full">
            <p className="text-gray-500">Unsupported chart type: {type}</p>
          </div>
        );
    }
  };
  return (
    <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>
      {chartData.title && (
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">{chartData.title}</h3>
          {chartData.subtitle && (
            <p className="text-sm text-gray-600 mt-1">{chartData.subtitle}</p>
          )}
        </div>
      )}
      <div className="p-6">
        <div className="h-64 w-full">
          {renderChart()}
        </div>
      </div>
    </div>
  );
};
export default ChartContainer;
</file>

<file path="src/components/common/ErrorBoundary.jsx">
import React from 'react';
import { ExclamationTriangleIcon, ArrowPathIcon } from '@heroicons/react/24/outline';
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    this.setState({
      error: error,
      errorInfo: errorInfo
    });
    // Log error to console in development
    if (process.env.NODE_ENV === 'development') {
      console.error('ErrorBoundary caught an error:', error, errorInfo);
    }
  }
  handleRetry = () => {
    this.setState({ hasError: false, error: null, errorInfo: null });
  };
  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
          <div className="max-w-md w-full space-y-8">
            <div className="text-center">
              <ExclamationTriangleIcon className="mx-auto h-16 w-16 text-red-500" />
              <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
                Oops! Something went wrong
              </h2>
              <p className="mt-2 text-sm text-gray-600">
                We're sorry, but something unexpected happened. Please try again.
              </p>
              {process.env.NODE_ENV === 'development' && this.state.error && (
                <details className="mt-4 text-left">
                  <summary className="cursor-pointer text-sm font-medium text-gray-700 hover:text-gray-900">
                    Error Details (Development)
                  </summary>
                  <div className="mt-2 p-4 bg-red-50 border border-red-200 rounded-md">
                    <pre className="text-xs text-red-800 whitespace-pre-wrap overflow-auto max-h-40">
                      {this.state.error.toString()}
                      {this.state.errorInfo.componentStack}
                    </pre>
                  </div>
                </details>
              )}
            </div>
            <div className="flex flex-col space-y-3">
              <button
                onClick={this.handleRetry}
                className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
              >
                <ArrowPathIcon className="w-4 h-4 mr-2" />
                Try Again
              </button>
              <button
                onClick={() => window.location.reload()}
                className="group relative w-full flex justify-center py-2 px-4 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
              >
                Reload Page
              </button>
              <button
                onClick={() => window.location.href = '/'}
                className="group relative w-full flex justify-center py-2 px-4 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
              >
                Go to Home
              </button>
            </div>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}
export default ErrorBoundary;
</file>

<file path="src/components/common/LoadingSpinner.jsx">
import React from 'react';
const LoadingSpinner = ({ size = 'medium', color = 'primary', className = '' }) => {
  const sizeClasses = {
    small: 'w-4 h-4',
    medium: 'w-8 h-8',
    large: 'w-12 h-12',
    xlarge: 'w-16 h-16'
  };
  const colorClasses = {
    primary: 'text-primary-600',
    secondary: 'text-secondary-600',
    white: 'text-white',
    gray: 'text-gray-600'
  };
  return (
    <div className={`flex justify-center items-center ${className}`}>
      <div
        className={`animate-spin rounded-full border-2 border-gray-200 border-t-current ${
          sizeClasses[size]
        } ${colorClasses[color]}`}
        role="status"
        aria-label="Loading"
      >
        <span className="sr-only">Loading...</span>
      </div>
    </div>
  );
};
export default LoadingSpinner;
</file>

<file path="src/components/layout/Navbar.jsx">
import React from 'react';
import { Bars3Icon, UserCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { CheckCircleIcon, ExclamationCircleIcon } from '@heroicons/react/24/solid';
const Navbar = ({ onToggleSidebar, currentUser, isConnected, sidebarOpen }) => {
  const getConnectionStatus = () => {
    if (isConnected === undefined || isConnected === null) {
      return {
        icon: ExclamationCircleIcon,
        color: 'text-yellow-500',
        bgColor: 'bg-yellow-100',
        text: 'Unknown'
      };
    }
    return isConnected ? {
      icon: CheckCircleIcon,
      color: 'text-green-500',
      bgColor: 'bg-green-100',
      text: 'Connected'
    } : {
      icon: XMarkIcon,
      color: 'text-red-500',
      bgColor: 'bg-red-100',
      text: 'Disconnected'
    };
  };
  const connectionStatus = getConnectionStatus();
  const StatusIcon = connectionStatus.icon;
  return (
    <nav className={`bg-white shadow-sm border-b border-gray-200 fixed top-0 right-0 z-30 transition-all duration-300 ${sidebarOpen ? 'left-64' : 'left-0'}`}>
      <div className="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          {/* Left side - Logo and menu toggle */}
          <div className="flex items-center">
            <button
              onClick={onToggleSidebar}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500 lg:hidden"
              aria-label="Toggle sidebar"
            >
              <Bars3Icon className="h-6 w-6" />
            </button>
            <div className="flex-shrink-0 flex items-center ml-4 lg:ml-0">
              <h1 className="text-xl font-bold text-gray-900">
                KDP Strategist
              </h1>
            </div>
          </div>
          {/* Right side - User info and status */}
          <div className="flex items-center space-x-4">
            {/* Connection Status */}
            <div className="flex items-center space-x-2">
              <div className={`flex items-center space-x-1 px-2 py-1 rounded-full ${connectionStatus.bgColor}`}>
                <StatusIcon className={`h-4 w-4 ${connectionStatus.color}`} />
                <span className={`text-xs font-medium ${connectionStatus.color}`}>
                  {connectionStatus.text}
                </span>
              </div>
            </div>
            {/* User Info */}
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2">
                <UserCircleIcon className="h-8 w-8 text-gray-400" />
                <div className="hidden sm:block">
                  <div className="text-sm font-medium text-gray-900">
                    {currentUser?.name || 'User'}
                  </div>
                  <div className="text-xs text-gray-500">
                    {currentUser?.email || 'user@example.com'}
                  </div>
                </div>
              </div>
              {/* User Menu Dropdown (placeholder) */}
              <div className="relative">
                <button
                  className="bg-white rounded-full flex text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                  id="user-menu-button"
                  aria-expanded="false"
                  aria-haspopup="true"
                >
                  <span className="sr-only">Open user menu</span>
                  <div className="h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center">
                    <span className="text-sm font-medium text-primary-700">
                      {(currentUser?.name || 'U').charAt(0).toUpperCase()}
                    </span>
                  </div>
                </button>
                {/* Dropdown menu - hidden by default, can be shown with state management */}
                {/* 
                <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button">
                  <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Your Profile</a>
                  <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Settings</a>
                  <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Sign out</a>
                </div>
                */}
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
};
export default Navbar;
</file>

<file path="src/components/layout/Sidebar.jsx">
import React from 'react';
import { NavLink } from 'react-router-dom';
import {
  HomeIcon,
  MagnifyingGlassIcon,
  ChartBarIcon,
  DocumentTextIcon,
  ArrowTrendingUpIcon,
  ShieldCheckIcon,
  Cog6ToothIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
const Sidebar = ({ isOpen, onClose }) => {
  const navigation = [
    {
      name: 'Dashboard',
      href: '/',
      icon: HomeIcon,
      description: 'Overview and quick actions'
    },
    {
      name: 'Niche Discovery',
      href: '/niche-discovery',
      icon: MagnifyingGlassIcon,
      description: 'Find profitable niches'
    },
    {
      name: 'Competitor Analysis',
      href: '/competitor-analysis',
      icon: ChartBarIcon,
      description: 'Analyze competitor performance'
    },
    {
      name: 'Listing Generation',
      href: '/listing-generation',
      icon: DocumentTextIcon,
      description: 'Generate optimized listings'
    },
    {
      name: 'Trend Validation',
      href: '/trend-validation',
      icon: ArrowTrendingUpIcon,
      description: 'Validate market trends'
    },
    {
      name: 'Stress Testing',
      href: '/stress-testing',
      icon: ShieldCheckIcon,
      description: 'Test niche resilience'
    },
    {
      name: 'Settings',
      href: '/settings',
      icon: Cog6ToothIcon,
      description: 'Configure preferences'
    }
  ];
  const handleLinkClick = () => {
    // Close sidebar on mobile when a link is clicked
    if (window.innerWidth < 1024) {
      onClose();
    }
  };
  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-gray-600 bg-opacity-75 transition-opacity lg:hidden z-40"
          onClick={onClose}
        />
      )}
      {/* Sidebar */}
      <div className={`
        fixed top-0 left-0 z-50 h-full w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 lg:z-auto lg:shadow-none lg:border-r lg:border-gray-200
        ${isOpen ? 'translate-x-0' : '-translate-x-full'}
      `}>
        {/* Sidebar header */}
        <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200 lg:hidden">
          <h2 className="text-lg font-semibold text-gray-900">Menu</h2>
          <button
            onClick={onClose}
            className="p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>
        {/* Navigation */}
        <nav className="mt-16 lg:mt-8 px-4 pb-4 overflow-y-auto h-full">
          <div className="space-y-2">
            {navigation.map((item) => {
              const Icon = item.icon;
              return (
                <NavLink
                  key={item.name}
                  to={item.href}
                  onClick={handleLinkClick}
                  className={({ isActive }) =>
                    `group flex items-center px-3 py-3 text-sm font-medium rounded-lg transition-colors duration-200 ${
                      isActive
                        ? 'bg-primary-100 text-primary-700 border-r-2 border-primary-500'
                        : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                    }`
                  }
                >
                  {({ isActive }) => (
                    <>
                      <Icon
                        className={`mr-3 h-5 w-5 flex-shrink-0 ${
                          isActive ? 'text-primary-600' : 'text-gray-400 group-hover:text-gray-500'
                        }`}
                      />
                      <div className="flex-1 min-w-0">
                        <div className="truncate">{item.name}</div>
                        <div className={`text-xs mt-0.5 truncate ${
                          isActive ? 'text-primary-600' : 'text-gray-500'
                        }`}>
                          {item.description}
                        </div>
                      </div>
                    </>
                  )}
                </NavLink>
              );
            })}
          </div>
          {/* Footer section */}
          <div className="mt-8 pt-8 border-t border-gray-200">
            <div className="px-3 py-2">
              <p className="text-xs text-gray-500 font-medium uppercase tracking-wider">
                KDP Strategist
              </p>
              <p className="text-xs text-gray-400 mt-1">
                AI-Powered Publishing Intelligence
              </p>
            </div>
          </div>
        </nav>
      </div>
    </>
  );
};
export default Sidebar;
</file>

<file path="src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';
// Create root element
const root = ReactDOM.createRoot(document.getElementById('root'));
// Render the app
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="src/pages/CompetitorAnalysis.jsx">
import React, { useState } from 'react';
import { apiService } from '../services/api';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ChartContainer from '../components/common/ChartContainer';
import { toast } from 'react-toastify';
import { ChartBarIcon, DocumentArrowDownIcon } from '@heroicons/react/24/outline';
const CompetitorAnalysis = () => {
  const [asins, setAsins] = useState('');
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const validateASIN = (asin) => {
    // Basic ASIN validation - 10 characters, alphanumeric
    const asinRegex = /^[A-Z0-9]{10}$/;
    return asinRegex.test(asin.toUpperCase());
  };
  const handleAnalyzeCompetitors = async (e) => {
    e.preventDefault();
    if (!asins.trim()) {
      toast.error('Please enter at least one ASIN');
      return;
    }
    // Parse and validate ASINs
    const asinList = asins.split(/[,\n]/).map(asin => asin.trim().toUpperCase()).filter(asin => asin);
    const invalidAsins = asinList.filter(asin => !validateASIN(asin));
    if (invalidAsins.length > 0) {
      toast.error(`Invalid ASINs: ${invalidAsins.join(', ')}. ASINs should be 10 characters long.`);
      return;
    }
    if (asinList.length === 0) {
      toast.error('Please enter valid ASINs');
      return;
    }
    setError(null);
    setResult(null);
    setIsLoading(true);
    try {
      const response = await apiService.analyzeCompetitors({ asins: asinList });
      setResult(response);
      toast.success('Competitor analysis completed successfully!');
    } catch (err) {
      console.error('Competitor analysis error:', err);
      setError(apiService.formatError(err));
      toast.error(`Error analyzing competitors: ${apiService.formatError(err)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleExport = () => {
    if (!result) return;
    // Create CSV content
    const headers = ['ASIN', 'Title', 'Price', 'Rating', 'Reviews', 'Sales Rank', 'Category'];
    const rows = result.competitors?.map(comp => [
      comp.asin || '',
      comp.title || '',
      comp.price || '',
      comp.rating || '',
      comp.review_count || '',
      comp.sales_rank || '',
      comp.category || ''
    ]) || [];
    const csvContent = [headers, ...rows].map(row => 
      row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
    ).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `competitor-analysis-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Analysis exported successfully!');
  };
  const renderCompetitorTable = () => {
    if (!result?.competitors || result.competitors.length === 0) {
      return (
        <p className="text-gray-500 text-center py-8">No competitor data available.</p>
      );
    }
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ASIN
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Title
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Price
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rating
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Reviews
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Sales Rank
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {result.competitors.map((competitor, index) => (
              <tr key={competitor.asin || index} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {competitor.asin || 'N/A'}
                </td>
                <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                  {competitor.title || 'N/A'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {competitor.price ? `$${competitor.price}` : 'N/A'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <div className="flex items-center">
                    <span className="mr-1">{competitor.rating || 'N/A'}</span>
                    {competitor.rating && (
                      <span className="text-yellow-400">★</span>
                    )}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {competitor.review_count ? competitor.review_count.toLocaleString() : 'N/A'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {competitor.sales_rank ? `#${competitor.sales_rank.toLocaleString()}` : 'N/A'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Competitor Analysis</h1>
      <p className="text-gray-600 mb-8">
        Analyze competitor performance and identify market opportunities.
      </p>
      {/* Analysis Form */}
      <div className="card mb-8">
        <div className="card-header">
          <h2 className="text-lg font-medium text-gray-900">Analyze Competitors</h2>
        </div>
        <form onSubmit={handleAnalyzeCompetitors} className="card-body">
          <div className="mb-4">
            <label htmlFor="asins" className="form-label">
              Amazon ASINs
            </label>
            <textarea
              id="asins"
              rows={4}
              className="form-textarea"
              placeholder="Enter ASINs separated by commas or new lines:\nB08N5WRWNW\nB07GHRPZ9V\nB09KMVJQZX"
              value={asins}
              onChange={(e) => setAsins(e.target.value)}
              disabled={isLoading}
            />
            <p className="form-help">
              Enter Amazon ASINs (10-character product identifiers) for books you want to analyze.
              Separate multiple ASINs with commas or new lines.
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <button
              type="submit"
              disabled={isLoading || !asins.trim()}
              className="btn btn-primary flex items-center"
            >
              {isLoading ? (
                <LoadingSpinner size="small" color="white" className="mr-2" />
              ) : (
                <ChartBarIcon className="w-4 h-4 mr-2" />
              )}
              {isLoading ? 'Analyzing...' : 'Analyze Competitors'}
            </button>
            {result && (
              <button
                type="button"
                onClick={handleExport}
                className="btn btn-secondary flex items-center"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Export Results
              </button>
            )}
          </div>
        </form>
      </div>
      {/* Error Display */}
      {error && (
        <div className="alert alert-error mb-8">
          <p>{error}</p>
        </div>
      )}
      {/* Results */}
      {result && (
        <div className="space-y-8">
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Analysis Results</h2>
            </div>
            <div className="card-body">
              <p className="text-gray-600 mb-4">
                Analyzed <span className="font-semibold text-primary-600">{result.competitors?.length || 0}</span> competitors.
              </p>
              {renderCompetitorTable()}
            </div>
            {result.insights && result.insights.length > 0 && (
              <div className="card-footer">
                <h3 className="text-md font-medium text-gray-800 mb-2">Key Insights:</h3>
                <ul className="list-disc list-inside text-gray-700 text-sm space-y-1">
                  {result.insights.map((insight, i) => <li key={i}>{insight}</li>)}
                </ul>
                {result.opportunities && result.opportunities.length > 0 && (
                  <>
                    <h3 className="text-md font-medium text-gray-800 mt-4 mb-2">Opportunities:</h3>
                    <ul className="list-disc list-inside text-gray-700 text-sm space-y-1">
                      {result.opportunities.map((opp, i) => <li key={i}>{opp}</li>)}
                    </ul>
                  </>
                )}
              </div>
            )}
          </div>
          {result.charts && result.charts.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {result.charts.map((chart, index) => (
                <ChartContainer key={index} chartData={chart} />
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};
export default CompetitorAnalysis;
</file>

<file path="src/pages/Dashboard.jsx">
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  MagnifyingGlassIcon,
  ChartBarIcon,
  DocumentTextIcon,
  ArrowTrendingUpIcon,
  ArrowRightIcon,
  EyeIcon,
  StarIcon
} from '@heroicons/react/24/outline';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ChartContainer from '../components/common/ChartContainer';
const Dashboard = () => {
  const [stats, setStats] = useState(null);
  const [recentActivity, setRecentActivity] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    // Simulate loading dashboard data
    const loadDashboardData = async () => {
      setIsLoading(true);
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      // Mock data
      setStats({
        totalAnalyses: 47,
        successfulListings: 23,
        averageScore: 78.5,
        trendsValidated: 12
      });
      setRecentActivity([
        {
          id: 1,
          type: 'niche_discovery',
          title: 'Self-Help Books Analysis',
          timestamp: '2 hours ago',
          status: 'completed',
          score: 85
        },
        {
          id: 2,
          type: 'competitor_analysis',
          title: 'Cookbook Market Research',
          timestamp: '5 hours ago',
          status: 'completed',
          score: 72
        },
        {
          id: 3,
          type: 'listing_generation',
          title: 'Meditation Guide Listing',
          timestamp: '1 day ago',
          status: 'completed',
          score: 91
        }
      ]);
      setIsLoading(false);
    };
    loadDashboardData();
  }, []);
  const quickActions = [
    {
      name: 'Discover Niches',
      description: 'Find profitable book niches',
      href: '/niche-discovery',
      icon: MagnifyingGlassIcon,
      color: 'bg-blue-500 hover:bg-blue-600'
    },
    {
      name: 'Analyze Competitors',
      description: 'Research competitor performance',
      href: '/competitor-analysis',
      icon: ChartBarIcon,
      color: 'bg-green-500 hover:bg-green-600'
    },
    {
      name: 'Generate Listing',
      description: 'Create optimized book listings',
      href: '/listing-generation',
      icon: DocumentTextIcon,
      color: 'bg-purple-500 hover:bg-purple-600'
    },
    {
      name: 'Validate Trends',
      description: 'Check market trend validity',
      href: '/trend-validation',
      icon: ArrowTrendingUpIcon,
      color: 'bg-orange-500 hover:bg-orange-600'
    }
  ];
  const getActivityIcon = (type) => {
    switch (type) {
      case 'niche_discovery':
        return MagnifyingGlassIcon;
      case 'competitor_analysis':
        return ChartBarIcon;
      case 'listing_generation':
        return DocumentTextIcon;
      case 'trend_validation':
        return ArrowTrendingUpIcon;
      default:
        return EyeIcon;
    }
  };
  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };
  // Mock chart data
  const performanceChart = {
    type: 'line',
    title: 'Analysis Performance Trend',
    data: {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
      datasets: [
        {
          label: 'Average Score',
          data: [65, 72, 68, 78, 82, 85],
          borderColor: 'rgba(59, 130, 246, 1)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          fill: true
        }
      ]
    }
  };
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="large" />
      </div>
    );
  }
  return (
    <div className="animate-fade-in">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
        <p className="text-gray-600 mt-2">
          Welcome back! Here's an overview of your KDP strategy performance.
        </p>
      </div>
      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="card">
          <div className="card-body">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <EyeIcon className="h-8 w-8 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Total Analyses</p>
                <p className="text-2xl font-bold text-gray-900">{stats?.totalAnalyses}</p>
              </div>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="card-body">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <DocumentTextIcon className="h-8 w-8 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Successful Listings</p>
                <p className="text-2xl font-bold text-gray-900">{stats?.successfulListings}</p>
              </div>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="card-body">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <StarIcon className="h-8 w-8 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Average Score</p>
                <p className="text-2xl font-bold text-gray-900">{stats?.averageScore}%</p>
              </div>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="card-body">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <ArrowTrendingUpIcon className="h-8 w-8 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Trends Validated</p>
                <p className="text-2xl font-bold text-gray-900">{stats?.trendsValidated}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Quick Actions */}
        <div className="lg:col-span-2">
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Quick Actions</h2>
              <p className="text-sm text-gray-600">Start your analysis with these tools</p>
            </div>
            <div className="card-body">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {quickActions.map((action) => {
                  const Icon = action.icon;
                  return (
                    <Link
                      key={action.name}
                      to={action.href}
                      className="group relative bg-white p-6 rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-md transition-all duration-200"
                    >
                      <div className="flex items-center">
                        <div className={`flex-shrink-0 p-3 rounded-lg ${action.color} transition-colors duration-200`}>
                          <Icon className="h-6 w-6 text-white" />
                        </div>
                        <div className="ml-4 flex-1">
                          <h3 className="text-sm font-medium text-gray-900 group-hover:text-primary-600">
                            {action.name}
                          </h3>
                          <p className="text-xs text-gray-500 mt-1">
                            {action.description}
                          </p>
                        </div>
                        <ArrowRightIcon className="h-4 w-4 text-gray-400 group-hover:text-primary-600 transition-colors duration-200" />
                      </div>
                    </Link>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
        {/* Recent Activity */}
        <div>
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Recent Activity</h2>
            </div>
            <div className="card-body">
              <div className="space-y-4">
                {recentActivity.map((activity) => {
                  const Icon = getActivityIcon(activity.type);
                  return (
                    <div key={activity.id} className="flex items-start space-x-3">
                      <div className="flex-shrink-0">
                        <Icon className="h-5 w-5 text-gray-400" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-900 truncate">
                          {activity.title}
                        </p>
                        <p className="text-xs text-gray-500">{activity.timestamp}</p>
                      </div>
                      <div className={`flex-shrink-0 px-2 py-1 text-xs font-medium rounded-full ${getScoreColor(activity.score)}`}>
                        {activity.score}%
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="card-footer">
              <Link
                to="/history"
                className="text-sm text-primary-600 hover:text-primary-700 font-medium"
              >
                View all activity →
              </Link>
            </div>
          </div>
        </div>
      </div>
      {/* Performance Chart */}
      <div className="mt-8">
        <ChartContainer chartData={performanceChart} />
      </div>
    </div>
  );
};
export default Dashboard;
</file>

<file path="src/pages/ListingGeneration.jsx">
import React, { useState } from 'react';
import { apiService } from '../services/api';
import LoadingSpinner from '../components/common/LoadingSpinner';
import { toast } from 'react-toastify';
import { DocumentTextIcon, DocumentArrowDownIcon, ClipboardDocumentIcon } from '@heroicons/react/24/outline';
const ListingGeneration = () => {
  const [formData, setFormData] = useState({
    niche: '',
    target_audience: '',
    book_type: 'paperback',
    keywords: '',
    unique_selling_points: '',
    tone: 'professional'
  });
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  const handleGenerateListing = async (e) => {
    e.preventDefault();
    // Validation
    if (!formData.niche.trim()) {
      toast.error('Please enter a niche');
      return;
    }
    if (!formData.target_audience.trim()) {
      toast.error('Please enter target audience');
      return;
    }
    setError(null);
    setResult(null);
    setIsLoading(true);
    try {
      const response = await apiService.generateListing({ niche: formData.niche, ...formData });
      setResult(response);
      toast.success('Listing generated successfully!');
    } catch (err) {
      console.error('Listing generation error:', err);
      setError(apiService.formatError(err));
      toast.error(`Error generating listing: ${apiService.formatError(err)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleCopyToClipboard = (text, label) => {
    navigator.clipboard.writeText(text).then(() => {
      toast.success(`${label} copied to clipboard!`);
    }).catch(() => {
      toast.error('Failed to copy to clipboard');
    });
  };
  const handleExport = () => {
    if (!result) return;
    const content = `
KDP BOOK LISTING
================
Title: ${result.title || 'N/A'}
Subtitle: ${result.subtitle || 'N/A'}
Description:
${result.description || 'N/A'}
Keywords:
${result.keywords ? result.keywords.join(', ') : 'N/A'}
Categories:
${result.categories ? result.categories.join(', ') : 'N/A'}
Back Cover Text:
${result.back_cover || 'N/A'}
Author Bio:
${result.author_bio || 'N/A'}
Generated on: ${new Date().toLocaleDateString()}
    `.trim();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `kdp-listing-${formData.niche.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Listing exported successfully!');
  };
  const renderGeneratedContent = () => {
    if (!result) return null;
    return (
      <div className="space-y-6">
        {/* Title */}
        {result.title && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Title</h3>
              <button
                onClick={() => handleCopyToClipboard(result.title, 'Title')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <p className="text-lg font-semibold text-gray-900">{result.title}</p>
            </div>
          </div>
        )}
        {/* Subtitle */}
        {result.subtitle && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Subtitle</h3>
              <button
                onClick={() => handleCopyToClipboard(result.subtitle, 'Subtitle')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <p className="text-gray-700">{result.subtitle}</p>
            </div>
          </div>
        )}
        {/* Description */}
        {result.description && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Description</h3>
              <button
                onClick={() => handleCopyToClipboard(result.description, 'Description')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <div className="prose max-w-none">
                {result.description.split('\n').map((paragraph, index) => (
                  <p key={index} className="mb-3 text-gray-700">{paragraph}</p>
                ))}
              </div>
            </div>
          </div>
        )}
        {/* Keywords */}
        {result.keywords && result.keywords.length > 0 && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Keywords</h3>
              <button
                onClick={() => handleCopyToClipboard(result.keywords.join(', '), 'Keywords')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <div className="flex flex-wrap gap-2">
                {result.keywords.map((keyword, index) => (
                  <span key={index} className="badge badge-primary">
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
          </div>
        )}
        {/* Categories */}
        {result.categories && result.categories.length > 0 && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Categories</h3>
              <button
                onClick={() => handleCopyToClipboard(result.categories.join(', '), 'Categories')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <ul className="list-disc list-inside text-gray-700 space-y-1">
                {result.categories.map((category, index) => (
                  <li key={index}>{category}</li>
                ))}
              </ul>
            </div>
          </div>
        )}
        {/* Back Cover */}
        {result.back_cover && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Back Cover Text</h3>
              <button
                onClick={() => handleCopyToClipboard(result.back_cover, 'Back Cover Text')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <div className="prose max-w-none">
                {result.back_cover.split('\n').map((paragraph, index) => (
                  <p key={index} className="mb-3 text-gray-700">{paragraph}</p>
                ))}
              </div>
            </div>
          </div>
        )}
        {/* Author Bio */}
        {result.author_bio && (
          <div className="card">
            <div className="card-header flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900">Author Bio</h3>
              <button
                onClick={() => handleCopyToClipboard(result.author_bio, 'Author Bio')}
                className="btn btn-sm btn-secondary flex items-center"
              >
                <ClipboardDocumentIcon className="w-4 h-4 mr-1" />
                Copy
              </button>
            </div>
            <div className="card-body">
              <p className="text-gray-700">{result.author_bio}</p>
            </div>
          </div>
        )}
      </div>
    );
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Listing Generation</h1>
      <p className="text-gray-600 mb-8">
        Generate optimized Amazon KDP book listings with compelling titles, descriptions, and keywords.
      </p>
      {/* Generation Form */}
      <div className="card mb-8">
        <div className="card-header">
          <h2 className="text-lg font-medium text-gray-900">Generate Book Listing</h2>
        </div>
        <form onSubmit={handleGenerateListing} className="card-body space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="niche" className="form-label">
                Niche *
              </label>
              <input
                type="text"
                id="niche"
                name="niche"
                className="form-input"
                placeholder="e.g., Self-help, Cooking, Romance"
                value={formData.niche}
                onChange={handleInputChange}
                disabled={isLoading}
                required
              />
            </div>
            <div>
              <label htmlFor="target_audience" className="form-label">
                Target Audience *
              </label>
              <input
                type="text"
                id="target_audience"
                name="target_audience"
                className="form-input"
                placeholder="e.g., Working professionals, New parents"
                value={formData.target_audience}
                onChange={handleInputChange}
                disabled={isLoading}
                required
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="book_type" className="form-label">
                Book Type
              </label>
              <select
                id="book_type"
                name="book_type"
                className="form-select"
                value={formData.book_type}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="paperback">Paperback</option>
                <option value="hardcover">Hardcover</option>
                <option value="ebook">eBook</option>
                <option value="audiobook">Audiobook</option>
              </select>
            </div>
            <div>
              <label htmlFor="tone" className="form-label">
                Tone
              </label>
              <select
                id="tone"
                name="tone"
                className="form-select"
                value={formData.tone}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="professional">Professional</option>
                <option value="casual">Casual</option>
                <option value="inspirational">Inspirational</option>
                <option value="academic">Academic</option>
                <option value="humorous">Humorous</option>
              </select>
            </div>
          </div>
          <div>
            <label htmlFor="keywords" className="form-label">
              Keywords
            </label>
            <input
              type="text"
              id="keywords"
              name="keywords"
              className="form-input"
              placeholder="Enter relevant keywords separated by commas"
              value={formData.keywords}
              onChange={handleInputChange}
              disabled={isLoading}
            />
            <p className="form-help">
              Optional: Provide specific keywords to include in the listing.
            </p>
          </div>
          <div>
            <label htmlFor="unique_selling_points" className="form-label">
              Unique Selling Points
            </label>
            <textarea
              id="unique_selling_points"
              name="unique_selling_points"
              rows={3}
              className="form-textarea"
              placeholder="What makes this book unique? Special features, benefits, or approaches..."
              value={formData.unique_selling_points}
              onChange={handleInputChange}
              disabled={isLoading}
            />
          </div>
          <div className="flex items-center space-x-4">
            <button
              type="submit"
              disabled={isLoading || !formData.niche.trim() || !formData.target_audience.trim()}
              className="btn btn-primary flex items-center"
            >
              {isLoading ? (
                <LoadingSpinner size="small" color="white" className="mr-2" />
              ) : (
                <DocumentTextIcon className="w-4 h-4 mr-2" />
              )}
              {isLoading ? 'Generating...' : 'Generate Listing'}
            </button>
            {result && (
              <button
                type="button"
                onClick={handleExport}
                className="btn btn-secondary flex items-center"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Export Listing
              </button>
            )}
          </div>
        </form>
      </div>
      {/* Error Display */}
      {error && (
        <div className="alert alert-error mb-8">
          <p>{error}</p>
        </div>
      )}
      {/* Results */}
      {result && (
        <div>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Generated Listing</h2>
            <div className="text-sm text-gray-500">
              Generated on {new Date().toLocaleDateString()}
            </div>
          </div>
          {renderGeneratedContent()}
        </div>
      )}
    </div>
  );
};
export default ListingGeneration;
</file>

<file path="src/pages/NicheDiscovery.jsx">
import React, { useState } from 'react';
import { apiService } from '../services/api';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ChartContainer from '../components/common/ChartContainer';
import { toast } from 'react-toastify';
import { MagnifyingGlassIcon, DocumentArrowDownIcon } from '@heroicons/react/24/outline';
const NicheDiscovery = () => {
  const [niche, setNiche] = useState('');
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const handleAnalyzeNiche = async (e) => {
    e.preventDefault();
    if (!niche.trim()) {
      toast.error('Please enter a niche to analyze');
      return;
    }
    setError(null);
    setResult(null);
    setIsLoading(true);
    try {
      const response = await apiService.discoverNiche({ base_keywords: [niche.trim()] });
      setResult(response);
      toast.success('Niche analysis completed successfully!');
    } catch (err) {
      console.error('Niche discovery error:', err);
      setError(apiService.formatError(err));
      toast.error(`Error analyzing niche: ${apiService.formatError(err)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleExport = () => {
    if (!result) return;
    // Create CSV content
    const csvContent = [
      ['Metric', 'Value'],
      ['Niche', result.niche || niche],
      ['Market Size', result.market_size || 'N/A'],
      ['Competition Level', result.competition_level || 'N/A'],
      ['Profit Potential', result.profit_potential || 'N/A'],
      ['Overall Score', result.overall_score || 'N/A'],
      ['', ''],
      ['Top Keywords', ''],
      ...(result.keywords || []).map(kw => ['', kw]),
      ['', ''],
      ['Opportunities', ''],
      ...(result.opportunities || []).map(opp => ['', opp])
    ].map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `niche-analysis-${niche.replace(/\s+/g, '-').toLowerCase()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Analysis exported successfully!');
  };
  const renderMetrics = () => {
    if (!result) return null;
    const metrics = [
      {
        label: 'Market Size',
        value: result.market_size || 'Unknown',
        color: 'text-blue-600'
      },
      {
        label: 'Competition Level',
        value: result.competition_level || 'Unknown',
        color: result.competition_level === 'Low' ? 'text-green-600' : 
               result.competition_level === 'Medium' ? 'text-yellow-600' : 'text-red-600'
      },
      {
        label: 'Profit Potential',
        value: result.profit_potential || 'Unknown',
        color: result.profit_potential === 'High' ? 'text-green-600' : 
               result.profit_potential === 'Medium' ? 'text-yellow-600' : 'text-red-600'
      },
      {
        label: 'Overall Score',
        value: result.overall_score ? `${result.overall_score}/100` : 'N/A',
        color: result.overall_score >= 70 ? 'text-green-600' : 
               result.overall_score >= 40 ? 'text-yellow-600' : 'text-red-600'
      }
    ];
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        {metrics.map((metric, index) => (
          <div key={index} className="card">
            <div className="card-body text-center">
              <p className="text-sm font-medium text-gray-500 mb-1">{metric.label}</p>
              <p className={`text-xl font-bold ${metric.color}`}>{metric.value}</p>
            </div>
          </div>
        ))}
      </div>
    );
  };
  const renderKeywords = () => {
    if (!result?.keywords || result.keywords.length === 0) return null;
    return (
      <div className="card mb-6">
        <div className="card-header">
          <h3 className="text-lg font-medium text-gray-900">Top Keywords</h3>
        </div>
        <div className="card-body">
          <div className="flex flex-wrap gap-2">
            {result.keywords.map((keyword, index) => (
              <span
                key={index}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 text-primary-800"
              >
                {keyword}
              </span>
            ))}
          </div>
        </div>
      </div>
    );
  };
  const renderOpportunities = () => {
    if (!result?.opportunities || result.opportunities.length === 0) return null;
    return (
      <div className="card mb-6">
        <div className="card-header">
          <h3 className="text-lg font-medium text-gray-900">Market Opportunities</h3>
        </div>
        <div className="card-body">
          <ul className="space-y-2">
            {result.opportunities.map((opportunity, index) => (
              <li key={index} className="flex items-start">
                <span className="flex-shrink-0 w-2 h-2 bg-green-400 rounded-full mt-2 mr-3"></span>
                <span className="text-gray-700">{opportunity}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    );
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Niche Discovery</h1>
      <p className="text-gray-600 mb-8">
        Discover profitable book niches with AI-powered market analysis.
      </p>
      {/* Analysis Form */}
      <div className="card mb-8">
        <div className="card-header">
          <h2 className="text-lg font-medium text-gray-900">Analyze a Niche</h2>
        </div>
        <form onSubmit={handleAnalyzeNiche} className="card-body">
          <div className="mb-4">
            <label htmlFor="niche" className="form-label">
              Niche or Topic
            </label>
            <input
              type="text"
              id="niche"
              className="form-input"
              placeholder="e.g., Self-help books, Cooking recipes, Meditation guides"
              value={niche}
              onChange={(e) => setNiche(e.target.value)}
              disabled={isLoading}
            />
            <p className="form-help">
              Enter a book niche, topic, or category you want to analyze.
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <button
              type="submit"
              disabled={isLoading || !niche.trim()}
              className="btn btn-primary flex items-center"
            >
              {isLoading ? (
                <LoadingSpinner size="small" color="white" className="mr-2" />
              ) : (
                <MagnifyingGlassIcon className="w-4 h-4 mr-2" />
              )}
              {isLoading ? 'Analyzing...' : 'Analyze Niche'}
            </button>
            {result && (
              <button
                type="button"
                onClick={handleExport}
                className="btn btn-secondary flex items-center"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Export Results
              </button>
            )}
          </div>
        </form>
      </div>
      {/* Error Display */}
      {error && (
        <div className="alert alert-error mb-8">
          <p>{error}</p>
        </div>
      )}
      {/* Results */}
      {result && (
        <div className="space-y-6">
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Analysis Results</h2>
              <p className="text-sm text-gray-600">Niche: {result.niche || niche}</p>
            </div>
            <div className="card-body">
              {renderMetrics()}
              {renderKeywords()}
              {renderOpportunities()}
              {/* Charts */}
              {result.charts && result.charts.length > 0 && (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {result.charts.map((chart, index) => (
                    <ChartContainer key={index} chartData={chart} />
                  ))}
                </div>
              )}
              {/* Additional Insights */}
              {result.insights && result.insights.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-md font-medium text-gray-800 mb-3">Key Insights</h3>
                  <ul className="space-y-2">
                    {result.insights.map((insight, index) => (
                      <li key={index} className="flex items-start">
                        <span className="flex-shrink-0 w-2 h-2 bg-blue-400 rounded-full mt-2 mr-3"></span>
                        <span className="text-gray-700">{insight}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
export default NicheDiscovery;
</file>

<file path="src/pages/Settings.jsx">
import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { 
  CogIcon, 
  UserIcon, 
  KeyIcon, 
  BellIcon, 
  GlobeAltIcon,
  EyeIcon,
  EyeSlashIcon,
  CheckIcon
} from '@heroicons/react/24/outline';
const Settings = () => {
  const [activeTab, setActiveTab] = useState('general');
  const [settings, setSettings] = useState({
    // General Settings
    theme: 'light',
    language: 'en',
    timezone: 'UTC',
    auto_save: true,
    // API Settings
    api_key: '',
    api_endpoint: 'https://api.kdpstrategist.com',
    rate_limit: 100,
    timeout: 30,
    // Notification Settings
    email_notifications: true,
    push_notifications: false,
    analysis_complete: true,
    weekly_reports: true,
    system_updates: false,
    // Privacy Settings
    data_collection: true,
    analytics: true,
    crash_reports: true,
    usage_statistics: false,
    // User Profile
    name: '',
    email: '',
    company: '',
    role: 'author'
  });
  const [showApiKey, setShowApiKey] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  useEffect(() => {
    // Load settings from localStorage on component mount
    const savedSettings = localStorage.getItem('kdp_strategist_settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.error('Error loading settings:', error);
      }
    }
  }, []);
  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
    setHasChanges(true);
  };
  const handleSaveSettings = async () => {
    setIsSaving(true);
    try {
      // Save to localStorage (in a real app, this would be an API call)
      localStorage.setItem('kdp_strategist_settings', JSON.stringify(settings));
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      setHasChanges(false);
      toast.success('Settings saved successfully!');
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('Failed to save settings. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  const handleResetSettings = () => {
    if (window.confirm('Are you sure you want to reset all settings to default values?')) {
      const defaultSettings = {
        theme: 'light',
        language: 'en',
        timezone: 'UTC',
        auto_save: true,
        api_key: '',
        api_endpoint: 'https://api.kdpstrategist.com',
        rate_limit: 100,
        timeout: 30,
        email_notifications: true,
        push_notifications: false,
        analysis_complete: true,
        weekly_reports: true,
        system_updates: false,
        data_collection: true,
        analytics: true,
        crash_reports: true,
        usage_statistics: false,
        name: '',
        email: '',
        company: '',
        role: 'author'
      };
      setSettings(defaultSettings);
      setHasChanges(true);
      toast.info('Settings reset to default values');
    }
  };
  const tabs = [
    { id: 'general', label: 'General', icon: CogIcon },
    { id: 'profile', label: 'Profile', icon: UserIcon },
    { id: 'api', label: 'API', icon: KeyIcon },
    { id: 'notifications', label: 'Notifications', icon: BellIcon },
    { id: 'privacy', label: 'Privacy', icon: GlobeAltIcon }
  ];
  const renderGeneralSettings = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="form-label">Theme</label>
          <select
            className="form-select"
            value={settings.theme}
            onChange={(e) => handleSettingChange('general', 'theme', e.target.value)}
          >
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="auto">Auto (System)</option>
          </select>
        </div>
        <div>
          <label className="form-label">Language</label>
          <select
            className="form-select"
            value={settings.language}
            onChange={(e) => handleSettingChange('general', 'language', e.target.value)}
          >
            <option value="en">English</option>
            <option value="es">Spanish</option>
            <option value="fr">French</option>
            <option value="de">German</option>
            <option value="pt">Portuguese</option>
          </select>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="form-label">Timezone</label>
          <select
            className="form-select"
            value={settings.timezone}
            onChange={(e) => handleSettingChange('general', 'timezone', e.target.value)}
          >
            <option value="UTC">UTC</option>
            <option value="America/New_York">Eastern Time</option>
            <option value="America/Chicago">Central Time</option>
            <option value="America/Denver">Mountain Time</option>
            <option value="America/Los_Angeles">Pacific Time</option>
            <option value="Europe/London">London</option>
            <option value="Europe/Paris">Paris</option>
            <option value="Asia/Tokyo">Tokyo</option>
          </select>
        </div>
        <div className="flex items-center space-x-3">
          <input
            type="checkbox"
            id="auto_save"
            checked={settings.auto_save}
            onChange={(e) => handleSettingChange('general', 'auto_save', e.target.checked)}
            className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label htmlFor="auto_save" className="text-sm font-medium text-gray-900">
            Auto-save changes
          </label>
        </div>
      </div>
    </div>
  );
  const renderProfileSettings = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="form-label">Full Name</label>
          <input
            type="text"
            className="form-input"
            placeholder="Enter your full name"
            value={settings.name}
            onChange={(e) => handleSettingChange('profile', 'name', e.target.value)}
          />
        </div>
        <div>
          <label className="form-label">Email Address</label>
          <input
            type="email"
            className="form-input"
            placeholder="Enter your email"
            value={settings.email}
            onChange={(e) => handleSettingChange('profile', 'email', e.target.value)}
          />
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="form-label">Company/Publisher</label>
          <input
            type="text"
            className="form-input"
            placeholder="Enter company name (optional)"
            value={settings.company}
            onChange={(e) => handleSettingChange('profile', 'company', e.target.value)}
          />
        </div>
        <div>
          <label className="form-label">Role</label>
          <select
            className="form-select"
            value={settings.role}
            onChange={(e) => handleSettingChange('profile', 'role', e.target.value)}
          >
            <option value="author">Author</option>
            <option value="publisher">Publisher</option>
            <option value="marketer">Marketer</option>
            <option value="researcher">Researcher</option>
            <option value="other">Other</option>
          </select>
        </div>
      </div>
    </div>
  );
  const renderApiSettings = () => (
    <div className="space-y-6">
      <div>
        <label className="form-label">API Key</label>
        <div className="relative">
          <input
            type={showApiKey ? 'text' : 'password'}
            className="form-input pr-10"
            placeholder="Enter your API key"
            value={settings.api_key}
            onChange={(e) => handleSettingChange('api', 'api_key', e.target.value)}
          />
          <button
            type="button"
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
            onClick={() => setShowApiKey(!showApiKey)}
          >
            {showApiKey ? (
              <EyeSlashIcon className="h-4 w-4 text-gray-400" />
            ) : (
              <EyeIcon className="h-4 w-4 text-gray-400" />
            )}
          </button>
        </div>
        <p className="form-help">
          Your API key is used to authenticate requests to the KDP Strategist API.
        </p>
      </div>
      <div>
        <label className="form-label">API Endpoint</label>
        <input
          type="url"
          className="form-input"
          placeholder="https://api.kdpstrategist.com"
          value={settings.api_endpoint}
          onChange={(e) => handleSettingChange('api', 'api_endpoint', e.target.value)}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="form-label">Rate Limit (requests/hour)</label>
          <input
            type="number"
            className="form-input"
            min="1"
            max="1000"
            value={settings.rate_limit}
            onChange={(e) => handleSettingChange('api', 'rate_limit', parseInt(e.target.value))}
          />
        </div>
        <div>
          <label className="form-label">Timeout (seconds)</label>
          <input
            type="number"
            className="form-input"
            min="5"
            max="300"
            value={settings.timeout}
            onChange={(e) => handleSettingChange('api', 'timeout', parseInt(e.target.value))}
          />
        </div>
      </div>
    </div>
  );
  const renderNotificationSettings = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">Delivery Methods</h3>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="email_notifications"
              checked={settings.email_notifications}
              onChange={(e) => handleSettingChange('notifications', 'email_notifications', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="email_notifications" className="text-sm font-medium text-gray-900">
              Email notifications
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="push_notifications"
              checked={settings.push_notifications}
              onChange={(e) => handleSettingChange('notifications', 'push_notifications', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="push_notifications" className="text-sm font-medium text-gray-900">
              Push notifications
            </label>
          </div>
        </div>
      </div>
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">Notification Types</h3>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="analysis_complete"
              checked={settings.analysis_complete}
              onChange={(e) => handleSettingChange('notifications', 'analysis_complete', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="analysis_complete" className="text-sm font-medium text-gray-900">
              Analysis completion
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="weekly_reports"
              checked={settings.weekly_reports}
              onChange={(e) => handleSettingChange('notifications', 'weekly_reports', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="weekly_reports" className="text-sm font-medium text-gray-900">
              Weekly reports
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="system_updates"
              checked={settings.system_updates}
              onChange={(e) => handleSettingChange('notifications', 'system_updates', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="system_updates" className="text-sm font-medium text-gray-900">
              System updates
            </label>
          </div>
        </div>
      </div>
    </div>
  );
  const renderPrivacySettings = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">Data Collection</h3>
        <p className="text-sm text-gray-600">
          Control what data we collect to improve your experience.
        </p>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="data_collection"
              checked={settings.data_collection}
              onChange={(e) => handleSettingChange('privacy', 'data_collection', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="data_collection" className="text-sm font-medium text-gray-900">
              Allow data collection for service improvement
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="analytics"
              checked={settings.analytics}
              onChange={(e) => handleSettingChange('privacy', 'analytics', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="analytics" className="text-sm font-medium text-gray-900">
              Analytics and performance tracking
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="crash_reports"
              checked={settings.crash_reports}
              onChange={(e) => handleSettingChange('privacy', 'crash_reports', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="crash_reports" className="text-sm font-medium text-gray-900">
              Automatic crash reports
            </label>
          </div>
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="usage_statistics"
              checked={settings.usage_statistics}
              onChange={(e) => handleSettingChange('privacy', 'usage_statistics', e.target.checked)}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="usage_statistics" className="text-sm font-medium text-gray-900">
              Usage statistics and feature analytics
            </label>
          </div>
        </div>
      </div>
    </div>
  );
  const renderTabContent = () => {
    switch (activeTab) {
      case 'general':
        return renderGeneralSettings();
      case 'profile':
        return renderProfileSettings();
      case 'api':
        return renderApiSettings();
      case 'notifications':
        return renderNotificationSettings();
      case 'privacy':
        return renderPrivacySettings();
      default:
        return renderGeneralSettings();
    }
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Settings</h1>
      <p className="text-gray-600 mb-8">
        Customize your KDP Strategist experience and manage your preferences.
      </p>
      <div className="flex flex-col lg:flex-row gap-8">
        {/* Sidebar Navigation */}
        <div className="lg:w-64">
          <nav className="space-y-1">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                    activeTab === tab.id
                      ? 'bg-primary-100 text-primary-700 border-r-2 border-primary-500'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <Icon className="w-5 h-5 mr-3" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
        {/* Main Content */}
        <div className="flex-1">
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">
                {tabs.find(tab => tab.id === activeTab)?.label} Settings
              </h2>
            </div>
            <div className="card-body">
              {renderTabContent()}
            </div>
            <div className="card-footer flex items-center justify-between">
              <button
                onClick={handleResetSettings}
                className="btn btn-outline text-red-600 border-red-300 hover:bg-red-50"
              >
                Reset to Defaults
              </button>
              <div className="flex items-center space-x-3">
                {hasChanges && (
                  <span className="text-sm text-yellow-600">
                    You have unsaved changes
                  </span>
                )}
                <button
                  onClick={handleSaveSettings}
                  disabled={!hasChanges || isSaving}
                  className="btn btn-primary flex items-center"
                >
                  {isSaving ? (
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  ) : (
                    <CheckIcon className="w-4 h-4 mr-2" />
                  )}
                  {isSaving ? 'Saving...' : 'Save Changes'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Settings;
</file>

<file path="src/pages/StressTesting.jsx">
import React, { useState } from 'react';
import { apiService } from '../services/api';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ChartContainer from '../components/common/ChartContainer';
import { toast } from 'react-toastify';
import { BeakerIcon, DocumentArrowDownIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
const StressTesting = () => {
  const [formData, setFormData] = useState({
    book_title: '',
    price_point: '',
    target_sales: '',
    competition_level: 'medium',
    marketing_budget: '',
    test_scenarios: ['price_sensitivity', 'market_saturation']
  });
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const availableScenarios = [
    { id: 'price_sensitivity', label: 'Price Sensitivity Analysis', description: 'Test how price changes affect sales potential' },
    { id: 'market_saturation', label: 'Market Saturation', description: 'Analyze market capacity and competition impact' },
    { id: 'seasonal_trends', label: 'Seasonal Trends', description: 'Test performance across different seasons' },
    { id: 'economic_downturn', label: 'Economic Downturn', description: 'Simulate performance during economic challenges' },
    { id: 'competitor_surge', label: 'Competitor Surge', description: 'Test resilience against new competitor entries' },
    { id: 'algorithm_changes', label: 'Algorithm Changes', description: 'Simulate Amazon algorithm and ranking changes' }
  ];
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  const handleScenarioChange = (scenarioId) => {
    setFormData(prev => ({
      ...prev,
      test_scenarios: prev.test_scenarios.includes(scenarioId)
        ? prev.test_scenarios.filter(id => id !== scenarioId)
        : [...prev.test_scenarios, scenarioId]
    }));
  };
  const handleStressTest = async (e) => {
    e.preventDefault();
    if (!formData.book_title.trim()) {
      toast.error('Please enter a book title');
      return;
    }
    if (!formData.price_point || parseFloat(formData.price_point) <= 0) {
      toast.error('Please enter a valid price point');
      return;
    }
    if (!formData.target_sales || parseInt(formData.target_sales) <= 0) {
      toast.error('Please enter valid target sales');
      return;
    }
    if (formData.test_scenarios.length === 0) {
      toast.error('Please select at least one test scenario');
      return;
    }
    setError(null);
    setResult(null);
    setIsLoading(true);
    try {
      const testData = {
        ...formData,
        price_point: parseFloat(formData.price_point),
        target_sales: parseInt(formData.target_sales),
        marketing_budget: formData.marketing_budget ? parseFloat(formData.marketing_budget) : 0
      };
      const response = await apiService.runStressTest({ niche: testData.niche, ...testData });
      setResult(response);
      toast.success('Stress testing completed successfully!');
    } catch (err) {
      console.error('Stress testing error:', err);
      setError(apiService.formatError(err));
      toast.error(`Error running stress test: ${apiService.formatError(err)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleExport = () => {
    if (!result) return;
    const content = `
STRESS TESTING REPORT
====================
Book: ${formData.book_title}
Price Point: $${formData.price_point}
Target Sales: ${formData.target_sales} units
Competition Level: ${formData.competition_level}
Marketing Budget: $${formData.marketing_budget || 0}
Test Scenarios:
${formData.test_scenarios.map(scenario => 
  `- ${availableScenarios.find(s => s.id === scenario)?.label || scenario}`
).join('\n')}
Overall Risk Score: ${result.overall_risk_score || 'N/A'}
Success Probability: ${result.success_probability || 'N/A'}%
Scenario Results:
${result.scenario_results?.map(scenario => 
  `\n${scenario.scenario}:\n  Risk Level: ${scenario.risk_level}\n  Impact: ${scenario.impact}\n  Probability: ${scenario.probability}%\n  Mitigation: ${scenario.mitigation_strategies?.join(', ') || 'None'}`
).join('\n') || 'No scenario results available'}
Recommendations:
${result.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations available'}
Generated on: ${new Date().toLocaleDateString()}
    `.trim();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `stress-test-${formData.book_title.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Report exported successfully!');
  };
  const getRiskColor = (riskLevel) => {
    switch (riskLevel?.toLowerCase()) {
      case 'low':
        return 'text-green-600 bg-green-100';
      case 'medium':
        return 'text-yellow-600 bg-yellow-100';
      case 'high':
        return 'text-red-600 bg-red-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };
  const getRiskIcon = (riskLevel) => {
    switch (riskLevel?.toLowerCase()) {
      case 'low':
        return '✅';
      case 'medium':
        return '⚠️';
      case 'high':
        return '🚨';
      default:
        return '❓';
    }
  };
  const renderScenarioResults = () => {
    if (!result?.scenario_results || result.scenario_results.length === 0) {
      return (
        <p className="text-gray-500 text-center py-8">No scenario results available.</p>
      );
    }
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {result.scenario_results.map((scenario, index) => (
          <div key={index} className="card">
            <div className="card-header">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium text-gray-900">
                  {availableScenarios.find(s => s.id === scenario.scenario)?.label || scenario.scenario}
                </h3>
                <span className="text-2xl">
                  {getRiskIcon(scenario.risk_level)}
                </span>
              </div>
            </div>
            <div className="card-body space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Risk Level:</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskColor(scenario.risk_level)}`}>
                  {scenario.risk_level || 'Unknown'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Impact:</span>
                <span className="text-sm font-medium text-gray-900">
                  {scenario.impact || 'N/A'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Probability:</span>
                <span className="text-sm font-medium text-gray-900">
                  {scenario.probability ? `${scenario.probability}%` : 'N/A'}
                </span>
              </div>
              {scenario.probability && (
                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span className="text-gray-600">Risk Probability</span>
                    <span className="text-gray-900">{scenario.probability}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        scenario.probability > 70 ? 'bg-red-500' :
                        scenario.probability > 40 ? 'bg-yellow-500' : 'bg-green-500'
                      }`}
                      style={{ width: `${scenario.probability}%` }}
                    ></div>
                  </div>
                </div>
              )}
              {scenario.mitigation_strategies && scenario.mitigation_strategies.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Mitigation Strategies:</h4>
                  <ul className="list-disc list-inside text-xs text-gray-700 space-y-1">
                    {scenario.mitigation_strategies.map((strategy, i) => (
                      <li key={i}>{strategy}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Stress Testing</h1>
      <p className="text-gray-600 mb-8">
        Test your book's resilience against various market scenarios and identify potential risks.
      </p>
      {/* Testing Form */}
      <div className="card mb-8">
        <div className="card-header">
          <h2 className="text-lg font-medium text-gray-900">Configure Stress Test</h2>
        </div>
        <form onSubmit={handleStressTest} className="card-body space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="book_title" className="form-label">
                Book Title *
              </label>
              <input
                type="text"
                id="book_title"
                name="book_title"
                className="form-input"
                placeholder="Enter your book title"
                value={formData.book_title}
                onChange={handleInputChange}
                disabled={isLoading}
                required
              />
            </div>
            <div>
              <label htmlFor="price_point" className="form-label">
                Price Point ($) *
              </label>
              <input
                type="number"
                id="price_point"
                name="price_point"
                className="form-input"
                placeholder="9.99"
                min="0.01"
                step="0.01"
                value={formData.price_point}
                onChange={handleInputChange}
                disabled={isLoading}
                required
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label htmlFor="target_sales" className="form-label">
                Target Sales (units/month) *
              </label>
              <input
                type="number"
                id="target_sales"
                name="target_sales"
                className="form-input"
                placeholder="100"
                min="1"
                value={formData.target_sales}
                onChange={handleInputChange}
                disabled={isLoading}
                required
              />
            </div>
            <div>
              <label htmlFor="competition_level" className="form-label">
                Competition Level
              </label>
              <select
                id="competition_level"
                name="competition_level"
                className="form-select"
                value={formData.competition_level}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="very_high">Very High</option>
              </select>
            </div>
            <div>
              <label htmlFor="marketing_budget" className="form-label">
                Marketing Budget ($)
              </label>
              <input
                type="number"
                id="marketing_budget"
                name="marketing_budget"
                className="form-input"
                placeholder="500"
                min="0"
                step="0.01"
                value={formData.marketing_budget}
                onChange={handleInputChange}
                disabled={isLoading}
              />
            </div>
          </div>
          <div>
            <label className="form-label mb-3 block">
              Test Scenarios *
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {availableScenarios.map((scenario) => (
                <div key={scenario.id} className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    id={scenario.id}
                    checked={formData.test_scenarios.includes(scenario.id)}
                    onChange={() => handleScenarioChange(scenario.id)}
                    disabled={isLoading}
                    className="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                  />
                  <div className="flex-1">
                    <label htmlFor={scenario.id} className="text-sm font-medium text-gray-900 cursor-pointer">
                      {scenario.label}
                    </label>
                    <p className="text-xs text-gray-600 mt-1">
                      {scenario.description}
                    </p>
                  </div>
                </div>
              ))}
            </div>
            <p className="form-help mt-2">
              Select the scenarios you want to test your book against.
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <button
              type="submit"
              disabled={isLoading || !formData.book_title.trim() || !formData.price_point || !formData.target_sales || formData.test_scenarios.length === 0}
              className="btn btn-primary flex items-center"
            >
              {isLoading ? (
                <LoadingSpinner size="small" color="white" className="mr-2" />
              ) : (
                <BeakerIcon className="w-4 h-4 mr-2" />
              )}
              {isLoading ? 'Running Tests...' : 'Run Stress Test'}
            </button>
            {result && (
              <button
                type="button"
                onClick={handleExport}
                className="btn btn-secondary flex items-center"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Export Report
              </button>
            )}
          </div>
        </form>
      </div>
      {/* Error Display */}
      {error && (
        <div className="alert alert-error mb-8">
          <p>{error}</p>
        </div>
      )}
      {/* Results */}
      {result && (
        <div className="space-y-8">
          {/* Overall Summary */}
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Test Summary</h2>
            </div>
            <div className="card-body">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center">
                  <div className={`text-3xl font-bold ${
                    result.overall_risk_score > 70 ? 'text-red-600' :
                    result.overall_risk_score > 40 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {result.overall_risk_score || 'N/A'}
                  </div>
                  <div className="text-sm text-gray-600">Overall Risk Score</div>
                </div>
                <div className="text-center">
                  <div className={`text-3xl font-bold ${
                    result.success_probability < 30 ? 'text-red-600' :
                    result.success_probability < 60 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {result.success_probability ? `${result.success_probability}%` : 'N/A'}
                  </div>
                  <div className="text-sm text-gray-600">Success Probability</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-primary-600">
                    {result.scenario_results?.length || 0}
                  </div>
                  <div className="text-sm text-gray-600">Scenarios Tested</div>
                </div>
              </div>
              {(result.overall_risk_score > 60 || result.success_probability < 40) && (
                <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div className="flex items-center">
                    <ExclamationTriangleIcon className="w-5 h-5 text-yellow-600 mr-2" />
                    <span className="text-sm font-medium text-yellow-800">
                      High risk detected. Review the scenario results and recommendations carefully.
                    </span>
                  </div>
                </div>
              )}
            </div>
          </div>
          {/* Scenario Results */}
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Scenario Results</h2>
            </div>
            <div className="card-body">
              {renderScenarioResults()}
            </div>
          </div>
          {/* Charts */}
          {result.charts && result.charts.length > 0 && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {result.charts.map((chart, index) => (
                <ChartContainer key={index} chartData={chart} />
              ))}
            </div>
          )}
          {/* Recommendations */}
          {result.recommendations && result.recommendations.length > 0 && (
            <div className="card">
              <div className="card-header">
                <h2 className="text-lg font-medium text-gray-900">Recommendations</h2>
              </div>
              <div className="card-body">
                <ul className="list-disc list-inside text-gray-700 space-y-2">
                  {result.recommendations.map((rec, i) => (
                    <li key={i}>{rec}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
export default StressTesting;
</file>

<file path="src/pages/TrendValidation.jsx">
import React, { useState } from 'react';
import { apiService } from '../services/api';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ChartContainer from '../components/common/ChartContainer';
import { toast } from 'react-toastify';
import { ArrowTrendingUpIcon, DocumentArrowDownIcon, CalendarIcon } from '@heroicons/react/24/outline';
const TrendValidation = () => {
  const [formData, setFormData] = useState({
    keywords: '',
    timeframe: '12',
    region: 'US',
    category: 'books'
  });
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  const handleValidateTrends = async (e) => {
    e.preventDefault();
    if (!formData.keywords.trim()) {
      toast.error('Please enter keywords to analyze');
      return;
    }
    setError(null);
    setResult(null);
    setIsLoading(true);
    try {
      const keywordList = formData.keywords.split(',').map(k => k.trim()).filter(k => k);
      const response = await apiService.validateTrends({
        ...formData,
        keywords: keywordList
      });
      setResult(response);
      toast.success('Trend validation completed successfully!');
    } catch (err) {
      console.error('Trend validation error:', err);
      setError(apiService.formatError(err));
      toast.error(`Error validating trends: ${apiService.formatError(err)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleExport = () => {
    if (!result) return;
    const content = `
TREND VALIDATION REPORT
======================
Keywords: ${formData.keywords}
Timeframe: ${formData.timeframe} months
Region: ${formData.region}
Category: ${formData.category}
Trend Summary:
${result.trends?.map(trend => 
  `- ${trend.keyword}: ${trend.trend_direction} (Score: ${trend.trend_score})`
).join('\n') || 'No trend data available'}
Insights:
${result.insights?.map(insight => `- ${insight}`).join('\n') || 'No insights available'}
Recommendations:
${result.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations available'}
Generated on: ${new Date().toLocaleDateString()}
    `.trim();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `trend-validation-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Report exported successfully!');
  };
  const getTrendIcon = (direction) => {
    switch (direction) {
      case 'rising':
        return '📈';
      case 'falling':
        return '📉';
      case 'stable':
        return '➡️';
      default:
        return '❓';
    }
  };
  const getTrendColor = (direction) => {
    switch (direction) {
      case 'rising':
        return 'text-green-600';
      case 'falling':
        return 'text-red-600';
      case 'stable':
        return 'text-yellow-600';
      default:
        return 'text-gray-600';
    }
  };
  const renderTrendResults = () => {
    if (!result?.trends || result.trends.length === 0) {
      return (
        <p className="text-gray-500 text-center py-8">No trend data available.</p>
      );
    }
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {result.trends.map((trend, index) => (
          <div key={index} className="card">
            <div className="card-body">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-medium text-gray-900 truncate">
                  {trend.keyword}
                </h3>
                <span className="text-2xl">
                  {getTrendIcon(trend.trend_direction)}
                </span>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Direction:</span>
                  <span className={`text-sm font-medium capitalize ${getTrendColor(trend.trend_direction)}`}>
                    {trend.trend_direction || 'Unknown'}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Score:</span>
                  <span className="text-sm font-medium text-gray-900">
                    {trend.trend_score || 'N/A'}
                  </span>
                </div>
                {trend.search_volume && (
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Search Volume:</span>
                    <span className="text-sm font-medium text-gray-900">
                      {trend.search_volume.toLocaleString()}
                    </span>
                  </div>
                )}
                {trend.competition && (
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Competition:</span>
                    <span className="text-sm font-medium text-gray-900">
                      {trend.competition}
                    </span>
                  </div>
                )}
              </div>
              {trend.confidence && (
                <div className="mt-3">
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-gray-600">Confidence:</span>
                    <span className="text-gray-900">{trend.confidence}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-primary-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${trend.confidence}%` }}
                    ></div>
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  };
  return (
    <div className="animate-fade-in">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Trend Validation</h1>
      <p className="text-gray-600 mb-8">
        Validate market trends and keyword popularity to make informed publishing decisions.
      </p>
      {/* Validation Form */}
      <div className="card mb-8">
        <div className="card-header">
          <h2 className="text-lg font-medium text-gray-900">Validate Trends</h2>
        </div>
        <form onSubmit={handleValidateTrends} className="card-body space-y-6">
          <div>
            <label htmlFor="keywords" className="form-label">
              Keywords *
            </label>
            <textarea
              id="keywords"
              name="keywords"
              rows={3}
              className="form-textarea"
              placeholder="Enter keywords separated by commas:\nself-help, productivity, mindfulness"
              value={formData.keywords}
              onChange={handleInputChange}
              disabled={isLoading}
              required
            />
            <p className="form-help">
              Enter keywords or topics you want to analyze for trends.
            </p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label htmlFor="timeframe" className="form-label">
                Timeframe
              </label>
              <select
                id="timeframe"
                name="timeframe"
                className="form-select"
                value={formData.timeframe}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="3">3 months</option>
                <option value="6">6 months</option>
                <option value="12">12 months</option>
                <option value="24">24 months</option>
                <option value="60">5 years</option>
              </select>
            </div>
            <div>
              <label htmlFor="region" className="form-label">
                Region
              </label>
              <select
                id="region"
                name="region"
                className="form-select"
                value={formData.region}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="US">United States</option>
                <option value="GB">United Kingdom</option>
                <option value="CA">Canada</option>
                <option value="AU">Australia</option>
                <option value="DE">Germany</option>
                <option value="FR">France</option>
                <option value="JP">Japan</option>
                <option value="worldwide">Worldwide</option>
              </select>
            </div>
            <div>
              <label htmlFor="category" className="form-label">
                Category
              </label>
              <select
                id="category"
                name="category"
                className="form-select"
                value={formData.category}
                onChange={handleInputChange}
                disabled={isLoading}
              >
                <option value="books">Books & Literature</option>
                <option value="education">Education</option>
                <option value="business">Business</option>
                <option value="health">Health & Fitness</option>
                <option value="lifestyle">Lifestyle</option>
                <option value="technology">Technology</option>
                <option value="all">All Categories</option>
              </select>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <button
              type="submit"
              disabled={isLoading || !formData.keywords.trim()}
              className="btn btn-primary flex items-center"
            >
              {isLoading ? (
                <LoadingSpinner size="small" color="white" className="mr-2" />
              ) : (
                <ArrowTrendingUpIcon className="w-4 h-4 mr-2" />
              )}
              {isLoading ? 'Validating...' : 'Validate Trends'}
            </button>
            {result && (
              <button
                type="button"
                onClick={handleExport}
                className="btn btn-secondary flex items-center"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Export Report
              </button>
            )}
          </div>
        </form>
      </div>
      {/* Error Display */}
      {error && (
        <div className="alert alert-error mb-8">
          <p>{error}</p>
        </div>
      )}
      {/* Results */}
      {result && (
        <div className="space-y-8">
          {/* Summary */}
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Trend Summary</h2>
            </div>
            <div className="card-body">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary-600">
                    {result.trends?.length || 0}
                  </div>
                  <div className="text-sm text-gray-600">Keywords Analyzed</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {result.trends?.filter(t => t.trend_direction === 'rising').length || 0}
                  </div>
                  <div className="text-sm text-gray-600">Rising Trends</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-600">
                    {result.trends?.filter(t => t.trend_direction === 'stable').length || 0}
                  </div>
                  <div className="text-sm text-gray-600">Stable Trends</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">
                    {result.trends?.filter(t => t.trend_direction === 'falling').length || 0}
                  </div>
                  <div className="text-sm text-gray-600">Falling Trends</div>
                </div>
              </div>
              <div className="flex items-center text-sm text-gray-600">
                <CalendarIcon className="w-4 h-4 mr-2" />
                Analysis period: {formData.timeframe} months | Region: {formData.region}
              </div>
            </div>
          </div>
          {/* Trend Cards */}
          <div className="card">
            <div className="card-header">
              <h2 className="text-lg font-medium text-gray-900">Keyword Trends</h2>
            </div>
            <div className="card-body">
              {renderTrendResults()}
            </div>
          </div>
          {/* Charts */}
          {result.charts && result.charts.length > 0 && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {result.charts.map((chart, index) => (
                <ChartContainer key={index} chartData={chart} />
              ))}
            </div>
          )}
          {/* Insights and Recommendations */}
          {(result.insights || result.recommendations) && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {result.insights && result.insights.length > 0 && (
                <div className="card">
                  <div className="card-header">
                    <h3 className="text-lg font-medium text-gray-900">Key Insights</h3>
                  </div>
                  <div className="card-body">
                    <ul className="list-disc list-inside text-gray-700 space-y-2">
                      {result.insights.map((insight, i) => (
                        <li key={i}>{insight}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              )}
              {result.recommendations && result.recommendations.length > 0 && (
                <div className="card">
                  <div className="card-header">
                    <h3 className="text-lg font-medium text-gray-900">Recommendations</h3>
                  </div>
                  <div className="card-body">
                    <ul className="list-disc list-inside text-gray-700 space-y-2">
                      {result.recommendations.map((rec, i) => (
                        <li key={i}>{rec}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};
export default TrendValidation;
</file>

<file path="src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};
export default reportWebVitals;
</file>

<file path="src/services/api.js">
/**
 * API Service for KDP Strategist Frontend
 * 
 * This module provides a centralized interface for all API calls
 * to the FastAPI backend, including error handling and request/response formatting.
 */
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';
class ApiService {
  constructor() {
    this.baseURL = API_BASE_URL;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
    };
  }
  /**
   * Make a generic API request
   */
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: { ...this.defaultHeaders, ...options.headers },
      ...options,
    };
    try {
      const response = await fetch(url, config);
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({
          detail: `HTTP ${response.status}: ${response.statusText}`
        }));
        throw new Error(errorData.detail || 'API request failed');
      }
      return await response.json();
    } catch (error) {
      console.error(`API request failed: ${endpoint}`, error);
      throw error;
    }
  }
  /**
   * GET request
   */
  async get(endpoint, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const url = queryString ? `${endpoint}?${queryString}` : endpoint;
    return this.request(url, {
      method: 'GET',
    });
  }
  /**
   * POST request
   */
  async post(endpoint, data = {}) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }
  /**
   * PUT request
   */
  async put(endpoint, data = {}) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }
  /**
   * DELETE request
   */
  async delete(endpoint) {
    return this.request(endpoint, {
      method: 'DELETE',
    });
  }
  // Health Check
  async checkHealth() {
    return this.get('/api/health');
  }
  // Niche Discovery APIs
  async discoverNiche(payload = {}) {
    const { keywords, ...options } = payload;
    const requestData = {
      keywords: Array.isArray(keywords) ? keywords : [keywords],
      max_results: options.maxResults || 20,
      min_search_volume: options.minSearchVolume || 1000,
      max_competition: options.maxCompetition || 0.7,
      include_seasonal: options.includeSeasonal || true,
      include_charts: options.includeCharts !== false,
      ...options
    };
    return this.post('/api/niches/discover', requestData);
  }
  async getTrendingNiches(payload = {}) {
    return this.get('/api/niches/trending', {
      timeframe: payload.timeframe || '30d',
      category: payload.category || 'all',
      min_growth_rate: payload.minGrowthRate || 0.1
    });
  }
  // Competitor Analysis APIs
  async analyzeCompetitors(payload = {}) {
    const { asins, ...options } = payload;
    const requestData = {
      asins: Array.isArray(asins) ? asins : [asins],
      include_pricing: options.includePricing !== false,
      include_reviews: options.includeReviews !== false,
      include_keywords: options.includeKeywords !== false,
      include_charts: options.includeCharts !== false,
      analysis_depth: options.analysisDepth || 'standard',
      ...options
    };
    return this.post('/api/competitors/analyze', requestData);
  }
  async searchCompetitors(payload = {}) {
    const { keyword, ...options } = payload;
    return this.get('/api/competitors/search', {
      keyword,
      max_results: options.maxResults || 50,
      min_reviews: options.minReviews || 10,
      max_price: options.maxPrice,
      sort_by: options.sortBy || 'relevance'
    });
  }
  async getMarketOverview(payload = {}) {
    const { niche, ...options } = payload;
    return this.get('/api/competitors/market-overview', {
      niche,
      timeframe: options.timeframe || '90d',
      include_forecasts: options.includeForecasts !== false
    });
  }
  // Listing Generation APIs
  async generateListing(payload = {}) {
    const { niche, ...options } = payload;
    const requestData = {
      niche,
      target_keywords: options.targetKeywords || [],
      style_preferences: options.stylePreferences || {},
      compliance_level: options.complianceLevel || 'strict',
      include_seo_analysis: options.includeSeoAnalysis !== false,
      include_variations: options.includeVariations !== false,
      ...options
    };
    return this.post('/api/listings/generate', requestData);
  }
  async optimizeListing(payload = {}) {
    const { listingData, ...options } = payload;
    const requestData = {
      current_listing: listingData,
      optimization_goals: options.optimizationGoals || ['seo', 'conversion'],
      target_keywords: options.targetKeywords || [],
      competitor_analysis: options.competitorAnalysis || false,
      ...options
    };
    return this.post('/api/listings/optimize', requestData);
  }
  async getListingTemplates(payload = {}) {
    const { category = 'all' } = payload;
    return this.get('/api/listings/templates', { category });
  }
  async checkCompliance(payload = {}) {
    const { listingData } = payload;
    return this.post('/api/listings/compliance-check', {
      listing_data: listingData
    });
  }
  // Trend Validation APIs
  async validateTrends(payload = {}) {
    const { keywords, ...options } = payload;
    const requestData = {
      keywords: Array.isArray(keywords) ? keywords : [keywords],
      timeframe: options.timeframe || '12m',
      include_forecasts: options.includeForecasts !== false,
      include_seasonal: options.includeSeasonal !== false,
      include_charts: options.includeCharts !== false,
      analysis_depth: options.analysisDepth || 'comprehensive',
      ...options
    };
    return this.post('/api/trends/validate', requestData);
  }
  async getTrendingKeywords(payload = {}) {
    return this.get('/api/trends/trending-keywords', {
      category: payload.category || 'all',
      timeframe: payload.timeframe || '7d',
      min_growth_rate: payload.minGrowthRate || 0.2,
      region: payload.region || 'US'
    });
  }
  async forecastTrend(payload = {}) {
    const { keyword, ...options } = payload;
    return this.get(`/api/trends/forecast/${encodeURIComponent(keyword)}`, {
      forecast_period: options.forecastPeriod || '6m',
      confidence_level: options.confidenceLevel || 0.8,
      include_scenarios: options.includeScenarios !== false
    });
  }
  async getSeasonalPatterns(payload = {}) {
    const { keywords, ...options } = payload;
    const requestData = {
      keywords: Array.isArray(keywords) ? keywords : [keywords],
      years_back: options.yearsBack || 3,
      include_predictions: options.includePredictions !== false
    };
    return this.post('/api/trends/seasonal-patterns', requestData);
  }
  // Stress Testing APIs
  async runStressTest(payload = {}) {
    const { niche, ...options } = payload;
    const requestData = {
      niche,
      test_scenarios: options.testScenarios || [
        'market_saturation',
        'seasonal_decline',
        'trend_reversal',
        'competition_increase'
      ],
      severity_level: options.severityLevel || 'moderate',
      include_recommendations: options.includeRecommendations !== false,
      ...options
    };
    return this.post('/api/stress/run', requestData);
  }
  async getAvailableScenarios() {
    return this.get('/api/stress/scenarios');
  }
  async getRiskMatrix() {
    return this.get('/api/stress/risk-matrix');
  }
  async compareNiches(payload = {}) {
    const { niches, scenarios = null } = payload;
    const requestData = {
      niches: Array.isArray(niches) ? niches : [niches],
      scenarios: scenarios
    };
    return this.post('/api/stress/compare', requestData);
  }
  // Export functionality
  async exportData(payload = {}) {
    const { data, format = 'csv', ...options } = payload;
    const requestData = {
      data,
      format,
      filename: options.filename,
      include_metadata: options.includeMetadata !== false,
      ...options
    };
    const response = await this.request('/api/export', {
      method: 'POST',
      body: JSON.stringify(requestData),
      headers: {
        ...this.defaultHeaders,
        'Accept': format === 'pdf' ? 'application/pdf' : 'application/octet-stream'
      }
    });
    return response;
  }
  // WebSocket connection for real-time updates
  createWebSocket(onMessage, onError = null, onClose = null) {
    const wsUrl = this.baseURL.replace('http', 'ws') + '/ws';
    const ws = new WebSocket(wsUrl);
    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        onMessage(data);
      } catch (error) {
        console.error('Failed to parse WebSocket message:', error);
      }
    };
    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
      if (onError) onError(error);
    };
    ws.onclose = (event) => {
      console.log('WebSocket connection closed:', event.code, event.reason);
      if (onClose) onClose(event);
    };
    return ws;
  }
  // Utility methods
  formatError(error) {
    if (error.response && error.response.data) {
      return error.response.data.detail || error.response.data.message || 'An error occurred';
    }
    return error.message || 'An unexpected error occurred';
  }
  isNetworkError(error) {
    return error.message.includes('fetch') || error.message.includes('Network');
  }
  // Cache management (simple in-memory cache)
  cache = new Map();
  getCached(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < 300000) { // 5 minutes
      return cached.data;
    }
    return null;
  }
  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }
  clearCache() {
    this.cache.clear();
  }
}
// Create and export a singleton instance
export const apiService = new ApiService();
export default apiService;
</file>

<file path="src/utils/chartUtils.js">
/**
 * Utility functions for transforming API chart data to Chart.js format
 */
/**
 * Transform API chart data to Chart.js compatible format
 * @param {Object} apiChartData - Chart data from API
 * @returns {Object} Chart.js compatible data structure
 */
export function transformChartData(apiChartData) {
  if (!apiChartData || !apiChartData.data) {
    return {
      labels: [],
      datasets: []
    };
  }
  const { type, data, labels, colors = [] } = apiChartData;
  // Default colors if none provided
  const defaultColors = [
    'rgba(59, 130, 246, 0.8)',   // blue
    'rgba(16, 185, 129, 0.8)',   // green
    'rgba(245, 158, 11, 0.8)',   // yellow
    'rgba(239, 68, 68, 0.8)',    // red
    'rgba(139, 92, 246, 0.8)',   // purple
    'rgba(236, 72, 153, 0.8)',   // pink
    'rgba(6, 182, 212, 0.8)',    // cyan
    'rgba(34, 197, 94, 0.8)'     // emerald
  ];
  const borderColors = [
    'rgba(59, 130, 246, 1)',
    'rgba(16, 185, 129, 1)',
    'rgba(245, 158, 11, 1)',
    'rgba(239, 68, 68, 1)',
    'rgba(139, 92, 246, 1)',
    'rgba(236, 72, 153, 1)',
    'rgba(6, 182, 212, 1)',
    'rgba(34, 197, 94, 1)'
  ];
  switch (type.toLowerCase()) {
    case 'bar':
      return transformBarChartData(data, labels, colors, defaultColors, borderColors);
    case 'line':
      return transformLineChartData(data, labels, colors, defaultColors, borderColors);
    case 'pie':
    case 'doughnut':
      return transformPieChartData(data, colors, defaultColors);
    case 'scatter':
      return transformScatterChartData(data, colors, defaultColors, borderColors);
    default:
      console.warn(`Unsupported chart type: ${type}`);
      return {
        labels: [],
        datasets: []
      };
  }
}
/**
 * Transform data for bar charts
 */
function transformBarChartData(data, labels, colors, defaultColors, borderColors) {
  const chartLabels = labels || data.map(item => item.name || item.label || item.x);
  const values = data.map(item => item.score || item.value || item.y);
  return {
    labels: chartLabels,
    datasets: [{
      label: 'Values',
      data: values,
      backgroundColor: colors.length > 0 ? colors : defaultColors,
      borderColor: borderColors,
      borderWidth: 1
    }]
  };
}
/**
 * Transform data for line charts
 */
function transformLineChartData(data, labels, colors, defaultColors, borderColors) {
  const chartLabels = labels || data.map(item => item.name || item.label || item.x);
  const values = data.map(item => item.score || item.value || item.y);
  return {
    labels: chartLabels,
    datasets: [{
      label: 'Values',
      data: values,
      backgroundColor: (colors && colors.length > 0) ? colors[0] : defaultColors[0],
      borderColor: (colors && colors.length > 0) ? colors[0] : borderColors[0],
      borderWidth: 2,
      fill: false,
      tension: 0.4
    }]
  };
}
/**
 * Transform data for pie/doughnut charts
 */
function transformPieChartData(data, colors, defaultColors) {
  const chartLabels = data.map(item => item.label || item.name);
  const values = data.map(item => item.value || item.score);
  return {
    labels: chartLabels,
    datasets: [{
      data: values,
      backgroundColor: colors.length > 0 ? colors : defaultColors.slice(0, data.length),
      borderWidth: 1,
      borderColor: '#ffffff'
    }]
  };
}
/**
 * Transform data for scatter charts
 */
function transformScatterChartData(data, colors, defaultColors, borderColors) {
  const scatterData = data.map(item => ({
    x: item.x,
    y: item.y,
    label: item.label
  }));
  return {
    datasets: [{
      label: 'Data Points',
      data: scatterData,
      backgroundColor: (colors && colors.length > 0) ? colors[0] : defaultColors[0],
      borderColor: (colors && colors.length > 0) ? colors[0] : borderColors[0],
      borderWidth: 1
    }]
  };
}
/**
 * Validate chart data structure
 * @param {Object} chartData - Chart data to validate
 * @returns {boolean} True if valid
 */
export function validateChartData(chartData) {
  if (!chartData) return false;
  if (!chartData.type) return false;
  if (!chartData.data || !Array.isArray(chartData.data)) return false;
  if (chartData.data.length === 0) return false;
  return true;
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
        success: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
        },
        warning: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          300: '#fcd34d',
          400: '#fbbf24',
          500: '#f59e0b',
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
        },
        danger: {
          50: '#fef2f2',
          100: '#fee2e2',
          200: '#fecaca',
          300: '#fca5a5',
          400: '#f87171',
          500: '#ef4444',
          600: '#dc2626',
          700: '#b91c1c',
          800: '#991b1b',
          900: '#7f1d1d',
        },
      },
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif'],
        mono: ['JetBrains Mono', 'ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', 'monospace'],
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-in': 'slideIn 0.3s ease-out',
        'bounce-subtle': 'bounceSubtle 2s infinite',
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideIn: {
          '0%': { transform: 'translateX(-100%)' },
          '100%': { transform: 'translateX(0)' },
        },
        bounceSubtle: {
          '0%, 100%': {
            transform: 'translateY(-5%)',
            animationTimingFunction: 'cubic-bezier(0.8, 0, 1, 1)',
          },
          '50%': {
            transform: 'translateY(0)',
            animationTimingFunction: 'cubic-bezier(0, 0, 0.2, 1)',
          },
        },
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
        'medium': '0 4px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        'strong': '0 10px 40px -10px rgba(0, 0, 0, 0.15), 0 4px 25px -5px rgba(0, 0, 0, 0.1)',
      },
      borderRadius: {
        'xl': '1rem',
        '2xl': '1.5rem',
        '3xl': '2rem',
      },
      backdropBlur: {
        xs: '2px',
      },
      screens: {
        'xs': '475px',
        '3xl': '1600px',
      },
      zIndex: {
        '60': '60',
        '70': '70',
        '80': '80',
        '90': '90',
        '100': '100',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
  darkMode: 'class',
}
</file>

</files>
